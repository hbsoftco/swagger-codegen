package {{invokerPackage}};

import (
  "encoding/json"
  "fmt"
  "net/url"
)

{{#operations}}
type {{classname}} struct { 
  basePath string
  apiInvoker ApiInvoker
}

func New{{classname}}() *obj{
    return &obj{basePath:"{{basePath}}", apiInvoker:ApiInvoker.GetInstance()}
}

  {{#operation}}
  /**
   * {{summary}}
   * {{notes}}
{{#allParams}}   * @param {{paramName}} {{description}}
{{/allParams}}   * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
   */
  func (response {{#returnType}}{{{returnType}}}{{/returnType}}) {{nickname}} ({{#allParams}}{{paramName}}{{{dateType}}} {{#hasMore}}, {{/hasMore}}{{/allParams}})  {
    postBody := {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}nil{{/bodyParam}}
    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    if {{paramName}} == nil {
       return 0, fmt.Error("Missing the required parameter '{{paramName}}' when calling {{nickname}}")
    }
    {{/required}}{{/allParams}}

    // create path and map variables
    path := "{{path}}".Replace("\\{format\\}","json")
    {{#pathParams}}path = path.Replace("\\{" + "{{paramName}}" + "\\}", ApiInvoker.EscapeString({{{paramName}}}))
    {{/pathParams}}

    queryParams := map[string]string {}
    headerParams := map[string]string {}
    formParams := map[string]string {}

    {{#queryParams}}if {{paramName}} {
      queryParams["{{baseName}}"] = ApiInvoker.ParameterToString({{paramName}});
    }
    {{/queryParams}}
    {{#headerParams}}headerParams["{{baseName}}"] = ApiInvoker.ParameterToString({{paramName}});
    {{/headerParams}}
    contentTypes := []string { {{#consumes}}"{{mediaType}}"{{#hasMore}},{{/hasMore}}{{/consumes}} }

    {{#formParams}}// form params
    if {{paramName}} {
      formParams["{{baseName}}"] = {{#isFile}}"@" . {{/isFile}}ApiInvoker.ToFormValue({{paramName}})
    }{{/formParams}}
    {{#bodyParams}}// body params
    _tempBody := nil
    if {{paramName}} {
      _tempBody = {{paramName}}
    }{{/bodyParams}}

      response := apiInvoker.CallAPI(basePath, path, "{{httpMethod}}", queryParams, postBody, headerParams, formParams, contentType)
      if response {
        return {{#returnType}}ApiInvoker.Deserialize(response, "{{returnContainer}}", "{{returnBaseType}}"){{/returnType}}
      } else {
        return {{^returnType}}nil{{/returnType}}
      }
  }
  {{/operation}}
{{/operations}}
